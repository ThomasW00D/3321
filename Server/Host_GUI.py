# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Host_GUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import threading
import socket
import random


class Ui_Form(object):
    nickname = ""
    host_ip = ""
    port = 0

    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1540, 1359)
        self.msgLBL = QtWidgets.QLabel(Form)
        self.msgLBL.setGeometry(QtCore.QRect(10, 170, 191, 25))
        self.msgLBL.setObjectName("msgLBL")
        self.logLbl = QtWidgets.QLabel(Form)
        self.logLbl.setGeometry(QtCore.QRect(780, 170, 281, 25))
        self.logLbl.setObjectName("logLbl")
        self.msgTxt = QtWidgets.QTextEdit(Form)
        self.msgTxt.setEnabled(False)
        self.msgTxt.setGeometry(QtCore.QRect(10, 210, 751, 541))
        self.msgTxt.setObjectName("msgTxt")
        self.logTxt = QtWidgets.QTextEdit(Form)
        self.logTxt.setEnabled(False)
        self.logTxt.setGeometry(QtCore.QRect(780, 210, 751, 541))
        self.logTxt.setReadOnly(True)
        self.logTxt.setObjectName("logTxt")
        self.createBtn = QtWidgets.QPushButton(Form)
        self.createBtn.setGeometry(QtCore.QRect(10, 30, 150, 46))
        self.createBtn.setObjectName("createBtn")
        self.sendBtn = QtWidgets.QPushButton(Form)
        self.sendBtn.setEnabled(False)
        self.sendBtn.setGeometry(QtCore.QRect(10, 760, 150, 46))
        self.sendBtn.setObjectName("sendBtn")
        self.serverTxt = QtWidgets.QTextEdit(Form)
        self.serverTxt.setEnabled(False)
        self.serverTxt.setGeometry(QtCore.QRect(10, 920, 1511, 311))
        self.serverTxt.setReadOnly(True)
        self.serverTxt.setObjectName("serverTxt")
        self.serverLbl = QtWidgets.QLabel(Form)
        self.serverLbl.setGeometry(QtCore.QRect(10, 880, 261, 25))
        self.serverLbl.setObjectName("serverLbl")
        self.closeBtn = QtWidgets.QPushButton(Form)
        self.closeBtn.setEnabled(False)
        self.closeBtn.setGeometry(QtCore.QRect(10, 1240, 150, 46))
        self.closeBtn.setObjectName("closeBtn")
        self.nicknameTxt = QtWidgets.QLineEdit(Form)
        self.nicknameTxt.setEnabled(False)
        self.nicknameTxt.setGeometry(QtCore.QRect(170, 110, 421, 31))
        self.nicknameTxt.setObjectName("nicknameTxt")
        self.nicknameBtn = QtWidgets.QPushButton(Form)
        self.nicknameBtn.setEnabled(False)
        self.nicknameBtn.setGeometry(QtCore.QRect(10, 100, 150, 46))
        self.nicknameBtn.setObjectName("nicknameBtn")

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

        self.createBtn.clicked.connect(lambda: threading.Thread(target=self.server).start())
        self.nicknameBtn.clicked.connect(lambda: self.client_setup())
        self.sendBtn.clicked.connect(lambda: self.write(Ui_Form.nickname, self.client_socket))
        #self.sendBtn.clicked.connect(lambda: threading.Thread(target=self.client, args=(Ui_Form.nickname,)).start())

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.msgLBL.setText(_translate("Form", "Message:"))
        self.logLbl.setText(_translate("Form", "Message Log:"))
        self.createBtn.setText(_translate("Form", "Create Server"))
        self.sendBtn.setText(_translate("Form", "Send Message"))
        self.serverLbl.setText(_translate("Form", "Server Log:"))
        self.closeBtn.setText(_translate("Form", "Close Server"))
        self.nicknameBtn.setText(_translate("Form", "Set Nickname"))

    def client_setup(self):
        # if self.client_loop is not None:
        #     return
        Ui_Form.nickname = self.nicknameTxt.text()
        if Ui_Form.nickname.isspace() or len(Ui_Form.nickname) == 0:
            #Ui_Form.message = "Incorrect nickname. Nickname can't be white space.\n>"
            #self.msgTxt.setText("")
            self.msgTxt.insertPlainText("Incorrect nickname. Nickname can't be white space.\n")
            return
        else:
            self.nicknameTxt.setEnabled(False)
            self.nicknameBtn.setEnabled(False)
            self.msgTxt.setEnabled(True)
            self.logTxt.setEnabled(True)
            self.sendBtn.setEnabled(True)
            #self.msgTxt.setText("")
            self.logTxt.insertPlainText(f"Nickname set to {Ui_Form.nickname}.\n")
            self.logTxt.insertPlainText("Client starting.\n")
            self.msgTxt.clear()
            self.client_socket = socket
            self.client_socket = self.client_socket.socket(self.client_socket.AF_INET, self.client_socket.SOCK_STREAM)
            self.client_socket.connect((Ui_Form.host_ip, Ui_Form.port))
            threading.Thread(target=self.client, args=(Ui_Form.nickname, self.client_socket, )).start()
            self.client_socket.sendall(Ui_Form.nickname.encode('ascii'))
            return

    def write(self, nickname, client_socket):
        message = f'(Host) {nickname}: {self.msgTxt.toPlainText()}'
        if message:
            client_socket.sendall(message.encode())
            self.msgTxt.clear()

    # def port_test(self, server_socket):
    #     return server_socket.connect_ex((Ui_Form.host_ip, Ui_Form.port)) == 0

    def server(self):
        self.serverTxt.setEnabled(True)
        self.createBtn.setEnabled(False)
        self.closeBtn.setEnabled(True)
        server_socket = socket
        Ui_Form.host_ip = server_socket.gethostbyname(server_socket.gethostname())
        server_socket = server_socket.socket(server_socket.AF_INET, server_socket.SOCK_STREAM)

        while True:
            randint = random.randint(10000, 65535)
            Ui_Form.port = randint
            try:
                server_socket.bind((Ui_Form.host_ip, Ui_Form.port))
                break
            except:
                self.serverTxt.insertPlainText(f"Port {Ui_Form.port} was taken. Reattempting.\n")
                continue

        # Ui_Form.port = randint
        #server_socket.bind((Ui_Form.host_ip, Ui_Form.port))

            # try:
            #     Ui_Form.port = randint
            #     server_socket.bind((Ui_Form.host_ip, Ui_Form.port))
            #     break
            # except:
            #     self.serverTxt.insertPlainText("Port was taken. Reattempting.")
            #     continue

        self.nicknameBtn.setEnabled(True)
        self.nicknameTxt.setEnabled(True)
        self.serverTxt.insertPlainText(f'Host IP: {Ui_Form.host_ip}\nHost Port: {Ui_Form.port}\n')
        server_socket.listen()

        clients = []
        nicknames = []


        def broadcast(msg):
            # with self.lock:
            for client in clients:
                client.send(msg)

        def handle(client):
            while True:
                try:
                    msg = client.recv(1024)
                    broadcast(msg)
                except:
                    index = clients.index(client)
                    clients.remove(client)
                    client.close()
                    nickname = nicknames[index]
                    broadcast(f'{nickname} left the chat.\n'.encode('ascii'))
                    nicknames.remove(nickname)
                    break

        def receive():
            while True:
                client, address = server_socket.accept()
                self.serverTxt.insertPlainText(f"Connected with {str(address)}\n")
                client.sendall("NICK".encode('ascii'))
                nickname = client.recv(1024).decode('ascii')
                nicknames.append(nickname)
                clients.append(client)

                self.serverTxt.insertPlainText(f'Nickname of new client is {nickname}.\n')
                broadcast(f'{nickname} joined the chat.\n'.encode('ascii'))
                client.sendall('Connected to the server.\n'.encode('ascii'))

                thread = threading.Thread(target=handle, args=(client,))
                thread.start()


        self.serverTxt.insertPlainText("Server is listening.\n")
        receive()

    def client(self, nickname, client_socket):
        client_socket = socket
        client_socket = client_socket.socket(client_socket.AF_INET, client_socket.SOCK_STREAM)
        client_socket.connect((Ui_Form.host_ip, Ui_Form.port))

        def receive():
            while True:
                try:
                    msg = client_socket.recv(1024).decode('ascii')
                    if msg == 'NICK':
                        client_socket.sendall(nickname.encode('ascii'))
                    else:
                        self.logTxt.insertPlainText(msg + "\n")
                except:
                    self.logTxt.insertPlainText("Error \n")
                    client_socket.close()
                    break

        # def send_message(message):
        #     client.send(message.encode('ascii'))
        #     return


            # while True:
            #     #if self.sendBtn.clicked():
            # # self.sendBtn.clicked.connect(lambda: send_message(client, message))
            #     message = f'(Host) {nickname}: {self.msgTxt.toPlainText()}'
            #     client_socket.send(message.encode('ascii'))
            # #self.sendBtn.clicked.connect(lambda: send_message(message))
            #     self.msgTxt.setText("")

        receive_thread = threading.Thread(target=receive)
        receive_thread.start()

        # self.sendBtn.clicked.connect(lambda: write())

        #write()

        # write_thread = threading.Thread(target=write)
        # write_thread.start()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
